version: '3'

output: 'prefixed'

tasks:

  clean:
    aliases:
      - c
    cmds:
      - find . -name "__pycache__" | xargs rm -rf
      - rm -rf "{{.DIR_TMPFS}}/coverage"
      - rm -rf "{{.DIR_TMPFS}}/mypy"
      - rm -rf "{{.DIR_TMPFS}}/ok.*"
      - rm -rf "{{.DIR_TMPFS}}/pytest"
    desc: clean temp files and caches
    dir: "{{.DIR_SERVICE}}"
    interactive: true

  format:
    aliases:
      - f
    cmds:
      - >
        autoflake
        --expand-star-imports
        --in-place
        --recursive
        --remove-all-unused-imports
        --remove-duplicate-keys
        --remove-unused-variables
        --verbose
        ./
      - black --config={{.DIR_PACKAGE}}/pyproject.toml ./
      - isort --virtual-env="{{.DIR_VENV}}" --settings-path={{.DIR_PACKAGE}}/pyproject.toml ./
      - task: code-lint-black
      - task: code-lint-isort
    desc: format code with black & isort
    dir: "{{.DIR_SERVICE}}"

  lint:
    aliases:
      - l
    cmds:
      - test -f "{{.DIR_TMPFS}}/ok.py:code-lint-black"
      - test -f "{{.DIR_TMPFS}}/ok.py:code-lint-flake8"
      - test -f "{{.DIR_TMPFS}}/ok.py:code-lint-isort"
      - test -f "{{.DIR_TMPFS}}/ok.py:code-lint-mypy"
      - echo 'all linters passed'
    deps:
      - code-lint-black
      - code-lint-isort
      - code-lint-mypy
      - code-lint-flake8
    desc: validate code using linters
    dir: "{{.DIR_SERVICE}}"
    silent: true

  code-lint-black:
    cmds:
      - >
        rm -f "{{.DIR_TMPFS}}/ok.{{.TASK}}"
        && black --check --config={{.DIR_PACKAGE}}/pyproject.toml ./
        && touch "{{.DIR_TMPFS}}/ok.{{.TASK}}"
    dir: "{{.DIR_SERVICE}}"
    ignore_error: true
    internal: true
  code-lint-isort:
    cmds:
      - >
        rm -f "{{.DIR_TMPFS}}/ok.{{.TASK}}"
        && isort --check-only --virtual-env="{{.DIR_VENV}}" --settings-path={{.DIR_PACKAGE}}/pyproject.toml ./
        && touch "{{.DIR_TMPFS}}/ok.{{.TASK}}"
    dir: "{{.DIR_SERVICE}}"
    ignore_error: true
    internal: true
  code-lint-mypy:
    cmds:
      - >
        rm -f "{{.DIR_TMPFS}}/ok.{{.TASK}}"
        && mypy --config={{.DIR_PACKAGE}}/pyproject.toml ./
        && touch "{{.DIR_TMPFS}}/ok.{{.TASK}}"
    dir: "{{.DIR_SERVICE}}"
    ignore_error: true
    internal: true
  code-lint-flake8:
    cmds:
      - >
        rm -f "{{.DIR_TMPFS}}/ok.{{.TASK}}"
        && flake8 --config={{.DIR_PACKAGE}}/.flake8 ./
        && touch "{{.DIR_TMPFS}}/ok.{{.TASK}}"
    dir: "{{.DIR_SERVICE}}"
    ignore_error: true
    internal: true

  tests:
    aliases:
      - t
    cmds:
      - >
        pytest
        --config-file={{.DIR_PACKAGE}}/pyproject.toml
        --cov-fail-under=0 {{.CLI_ARGS}}
        --cov-config={{.DIR_PACKAGE}}/pyproject.toml
        --rootdir=./
    desc: run tests
    dir: "{{.DIR_SERVICE}}"
    interactive: true
    run: once

  tests-coverage:
    cmds:
      - coverage html
    deps:
      - run-tests
    desc: calculate tests coverage
    dir: "{{.DIR_SERVICE}}"
    generates:
      - "{{.DIR_TMPFS}}/coverage/html/**/*"
    run: once

vars:
  DIR_PACKAGE:
    sh: ( cd /opt/iteen/ && pwd )
  DIR_SERVICE:
    sh: ( cd /srv/iteen/ && pwd )
  DIR_TMPFS:
    sh: ( cd /mnt/tmpfs/ && pwd )
  DIR_VENV:
    sh: ( cd /usr/local/lib/python3.11/ && pwd )
